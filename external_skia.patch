diff --git a/include/core/SkXfermode.h b/include/core/SkXfermode.h
index dc298ba..df55cd7 100755
--- a/include/core/SkXfermode.h
+++ b/include/core/SkXfermode.h
@@ -187,7 +187,6 @@ protected:
     virtual SkPMColor xferColor(SkPMColor src, SkPMColor dst);
 
 private:
-	void* fProcSIMD;
     enum {
         kModeCount = kLastMode + 1
     };
diff --git a/src/core/SkXfermode.cpp b/src/core/SkXfermode.cpp
index 6897ed8..03dc128 100755
--- a/src/core/SkXfermode.cpp
+++ b/src/core/SkXfermode.cpp
@@ -1100,60 +1100,12 @@ SkPMColor SkXfermode::xferColor(SkPMColor src, SkPMColor dst) {
     return dst;
 }
 
-typedef uint8x8x4_t (*SkXfermodeProcSIMD)(uint8x8x4_t src, uint8x8x4_t dst);
 void SkXfermode::xfer32(SkPMColor* SK_RESTRICT dst,
                         const SkPMColor* SK_RESTRICT src, int count,
                         const SkAlpha* SK_RESTRICT aa) {
     SkASSERT(dst && src && count >= 0);
-	//SkXfermodeProc proc = this->getProc();
-    SkXfermodeProcSIMD procSIMD = reinterpret_cast<SkXfermodeProcSIMD>(fProcSIMD);
-	SkASSERT(procSIMD != NULL);
-    if (NULL == aa) {
-        // Unrolled NEON code
-        while (count >= 8) {
-            uint8x8x4_t vsrc, vdst, vres;
-
-#if (__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 6))
-            asm volatile (
-                "vld4.u8    %h[vsrc], [%[src]]!  \t\n"
-                "vld4.u8    %h[vdst], [%[dst]]   \t\n"
-                : [vsrc] "=w" (vsrc), [vdst] "=w" (vdst), [src] "+&r" (src)
-                : [dst] "r" (dst)
-                :
-            );
-#else
-            register uint8x8_t d0 asm("d0");
-            register uint8x8_t d1 asm("d1");
-            register uint8x8_t d2 asm("d2");
-            register uint8x8_t d3 asm("d3");
-            register uint8x8_t d4 asm("d4");
-            register uint8x8_t d5 asm("d5");
-            register uint8x8_t d6 asm("d6");
-            register uint8x8_t d7 asm("d7");
-
-            asm volatile (
-                "vld4.u8    {d0-d3},[%[src]]!;"
-                "vld4.u8    {d4-d7},[%[dst]];"
-                : "=w" (d0), "=w" (d1), "=w" (d2), "=w" (d3),
-                  "=w" (d4), "=w" (d5), "=w" (d6), "=w" (d7),
-                  [src] "+&r" (src)
-                : [dst] "r" (dst)
-                :
-            );
-            vsrc.val[0] = d0; vdst.val[0] = d4;
-            vsrc.val[1] = d1; vdst.val[1] = d5;
-            vsrc.val[2] = d2; vdst.val[2] = d6;
-            vsrc.val[3] = d3; vdst.val[3] = d7;
-#endif
-            vres = procSIMD(vsrc, vdst);
-
-            vst4_u8((uint8_t*)dst, vres);
-
-            count -= 8;
-            dst += 8;
-        }
-        // Leftovers
 
+    if (NULL == aa) {
         for (int i = count - 1; i >= 0; --i) {
             dst[i] = this->xferColor(src[i], dst[i]);
         }
@@ -1176,48 +1128,9 @@ void SkXfermode::xfer16(uint16_t* dst,
                         const SkPMColor* SK_RESTRICT src, int count,
                         const SkAlpha* SK_RESTRICT aa) {
     SkASSERT(dst && src && count >= 0);
-	SkXfermodeProcSIMD procSIMD = reinterpret_cast<SkXfermodeProcSIMD>(fProcSIMD);
-	SkASSERT(procSIMD != NULL);
-    if (NULL == aa) {
-        while(count >= 8) {
-            uint16x8_t vdst, vres16;
-            uint8x8x4_t vdst32, vsrc, vres;
-
-            vdst = vld1q_u16(dst);
-
-#if (__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 6))
-            asm volatile (
-                "vld4.u8    %h[vsrc], [%[src]]!  \t\n"
-                : [vsrc] "=w" (vsrc), [src] "+&r" (src)
-                : :
-            );
-#else
-            register uint8x8_t d0 asm("d0");
-            register uint8x8_t d1 asm("d1");
-            register uint8x8_t d2 asm("d2");
-            register uint8x8_t d3 asm("d3");
-
-            asm volatile (
-                "vld4.u8    {d0-d3},[%[src]]!;"
-                : "=w" (d0), "=w" (d1), "=w" (d2), "=w" (d3),
-                  [src] "+&r" (src)
-                : :
-            );
-            vsrc.val[0] = d0;
-            vsrc.val[1] = d1;
-            vsrc.val[2] = d2;
-            vsrc.val[3] = d3;
-#endif
-            vdst32 = SkPixel16ToPixel32_neon8(vdst);
-            vres = procSIMD(vsrc, vdst32);
-            vres16 = SkPixel32ToPixel16_neon8(vres);
-
-            vst1q_u16(dst, vres16);
 
-            count -= 8;
-            dst += 8;
-        }
-		for (int i = count - 1; i >= 0; --i) {
+    if (NULL == aa) {
+        for (int i = count - 1; i >= 0; --i) {
             SkPMColor dstC = SkPixel16ToPixel32(dst[i]);
             dst[i] = SkPixel32ToPixel16_ToU16(this->xferColor(src[i], dstC));
         }
